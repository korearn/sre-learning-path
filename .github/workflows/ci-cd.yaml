---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security:
    name: Security Scans
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Scan dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          echo "=== DEPENDENCY VULNERABILITIES ==="
          safety check --short-report

      - name: Scan code for security issues
        run: |
          echo "=== CODE SECURITY SCAN ==="
          bandit -r ./src -f json -o bandit-report.json || true
          bandit -r ./src -f screen

      - name: Run SAST with Semgrep
        run: |
          echo "=== SEMGREP SAST SCAN ==="
          semgrep scan --config=auto --json \
            --output semgrep-report.json || true
          semgrep scan --config=auto --quiet

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: "*-report.json"
          retention-days: 7

  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    needs: security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install quality tools
        run: |
          pip install black flake8 coverage

      - name: Check code formatting with Black
        run: |
          black --check ./src ./tests

      - name: Run linting with Flake8
        run: |
          flake8 ./src ./tests --count --max-complexity=10 \
            --max-line-length=88 --statistics --show-source

      - name: Run tests with coverage
        run: |
          coverage run --source=src -m pytest tests/ -v
          coverage report
          coverage html

      - name: Generate coverage badge
        run: |
          pip install coverage-badge
          coverage-badge -o coverage.svg

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.svg
            .coverage

  build:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t log-analyzer:ci-cd .

      - name: Install Trivy
        run: |
          curl -sfL \
            https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: Scan Docker image for vulnerabilities
        run: |
          trivy image --format table --exit-code 0 log-analyzer:ci-cd
          trivy image --format json --output trivy-report.json \
            log-analyzer:ci-cd || true

      - name: Upload Docker scan reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-reports
          path: trivy-report.json

  deploy-demo:
    name: Deploy to Kind Cluster
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Kind cluster
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/
        
      - name: Create cluster
        run: |
          cat > kind-config.yaml << 'EOF'
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          EOF
          kind create cluster --config kind-config.yaml
        
      - name: Verify cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [security, test, build, deploy-demo]
    if: always()

    steps:
      - name: Pipeline completed
        run: |
          echo "‚úÖ CI/CD Pipeline with Security Scans completed"
          echo "Security, tests, build, and deployment verification finished"

      - name: Download coverage badge
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./downloaded-reports

      - name: Create summary report
        if: always()
        run: |
          echo "## üöÄ CI/CD Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Quality & Security Gates" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scanning**: Safety, Bandit, Semgrep, Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: Black formatting, Flake8 linting" >> $GITHUB_STEP_SUMMARY
          echo "- **Testing**: pytest with coverage reporting" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: Docker image built and scanned" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment**: Kubernetes cluster validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Security reports (Safety, Bandit, Semgrep, Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports (HTML + SVG badge)" >> $GITHUB_STEP_SUMMARY
          echo "- Docker scan results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          echo "2. Review security findings if any" >> $GITHUB_STEP_SUMMARY
          echo "3. Check coverage badge for README" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Mostrar estado final
          if [ "${{ job.status }}" = "success" ]; then
            echo "**üéâ ALL CHECKS PASSED - PIPELINE SUCCESSFUL**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**‚ö†Ô∏è SOME CHECKS FAILED - REVIEW LOGS**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify completion status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Pipeline completed successfully!"
            echo "All quality and security gates passed"
          else
            echo "‚ùå Pipeline completed with failures"
            echo "Check workflow logs for details"
          fi